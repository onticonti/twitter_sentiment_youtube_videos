# -*- coding: utf-8 -*-
"""twitter_akbank_data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qdbV8kITm-fk_1nKOfIDBJIwoRP4ZPAd

Dosya Okuma
"""

import pandas as pd
import numpy as np

akbank = pd.read_excel('/content/akbank.xlsx')
akbank.head()

akbank.shape

akbank.info()

"""AUTOVİZ Library"""

pip install autoviz

from autoviz.AutoViz_Class import AutoViz_Class

AV = AutoViz_Class()
dft = AV.AutoViz('/content/akbank.xlsx')

"""Pandas-Profiling Colab"""

pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip

import numpy as np
import pandas as pd
from pandas_profiling import ProfileReport
df = akbank.copy()
profile = ProfileReport(df, title="Pandas Profiling Report")

profile.to_file("pandas_profiling_report.html")

"""SweetViz Library"""

pip install sweetviz

import sweetviz as sv

df['id'] = pd.to_numeric(df['id'], errors='coerce')
df['conversation_id'] = pd.to_numeric(df['conversation_id'], errors='coerce')
df['date'] = pd.to_datetime(df['date'], errors='coerce')
df['time'] = pd.to_datetime(df['time'], errors='coerce')
df['username'] = df['username'].astype(str)
df['name'] = df['name'].astype(str)
df['urls'] = df['urls'].astype(str)
df['quote_url'] = df['quote_url'].astype(str)

my_report = sv.analyze(df)
my_report.show_html()

"""Dtale Library [dtale_app.USE_COLAB = True]"""

pip install dtale

import pandas as pd

import dtale
import dtale.app as dtale_app

dtale_app.USE_COLAB = True

dtale.show(df)

# DISCLAIMER: 'df' refers to the data you passed in when calling 'dtale.show'

import numpy as np
import pandas as pd
import plotly.graph_objs as go

if isinstance(df, (pd.DatetimeIndex, pd.MultiIndex)):
	df = df.to_frame(index=False)

# remove any pre-existing indices for ease of use in the D-Tale code, but this is not required
df = df.reset_index().drop('index', axis=1, errors='ignore')
df.columns = [str(c) for c in df.columns]  # update columns to strings in case they are numbers

s= df['tweet']
s = s.str.replace(r'[\d]+', '')
df.loc[:, 'tweet_cleaned'] = pd.Series(s, index=df.index, name='tweet_cleaned')
s = df[~pd.isnull(df['tweet'])]['tweet']
chart = pd.value_counts(s.str.split(expand=True).stack())
chart = chart.to_frame(name='data').sort_index()
chart.index.name = 'labels'
chart = chart.reset_index().sort_values(['data', 'labels'], ascending=[False, True])
chart = chart[:100]
charts = [go.Bar(x=chart['labels'].values, y=chart['data'].values, name='Frequency')]
figure = go.Figure(data=charts, layout=go.Layout({
    'barmode': 'group',
    'legend': {'orientation': 'h'},
    'title': {'text': 'tweet Word Value Counts'},
    'xaxis': {'title': {'text': 'tweet'}},
    'yaxis': {'title': {'text': 'Frequency'}}
}))

# If you're having trouble viewing your chart in your notebook try passing your 'chart' into this snippet:
#
# from plotly.offline import iplot, init_notebook_mode
#
# init_notebook_mode(connected=True)
# for chart in charts:
#     chart.pop('id', None) # for some reason iplot does not like 'id'
# iplot(figure)
figure

# DISCLAIMER: 'df' refers to the data you passed in when calling 'dtale.show'

import numpy as np
import pandas as pd
import plotly.graph_objs as go

if isinstance(df, (pd.DatetimeIndex, pd.MultiIndex)):
	df = df.to_frame(index=False)

# remove any pre-existing indices for ease of use in the D-Tale code, but this is not required
df = df.reset_index().drop('index', axis=1, errors='ignore')
df.columns = [str(c) for c in df.columns]  # update columns to strings in case they are numbers

s= df['tweet']
s = s.str.replace(r'[\d]+', '')
df.loc[:, 'tweet_cleaned'] = pd.Series(s, index=df.index, name='tweet_cleaned')
s = df[~pd.isnull(df['tweet'])]['tweet']
chart = pd.value_counts(s).to_frame(name='data')
chart.index.name = 'labels'
chart = chart.reset_index().sort_values(['data', 'labels'], ascending=[False, True])
chart = chart[:100]
charts = [go.Bar(x=chart['labels'].values, y=chart['data'].values, name='Frequency')]
figure = go.Figure(data=charts, layout=go.Layout({
    'barmode': 'group',
    'legend': {'orientation': 'h'},
    'title': {'text': 'tweet Value Counts'},
    'xaxis': {'title': {'text': 'tweet'}},
    'yaxis': {'title': {'text': 'Frequency'}}
}))
figure
# If you're having trouble viewing your chart in your notebook try passing your 'chart' into this snippet:
#
# from plotly.offline import iplot, init_notebook_mode
#
# init_notebook_mode(connected=True)
# for chart in charts:
#     chart.pop('id', None) # for some reason iplot does not like 'id'
# iplot(figure)

s = df['time']
s = s.replace({
	np.nan: "yok",
})
s

# DISCLAIMER: 'df' refers to the data you passed in when calling 'dtale.show'

import pandas as pd

if isinstance(df, (pd.DatetimeIndex, pd.MultiIndex)):
	df = df.to_frame(index=False)

# remove any pre-existing indices for ease of use in the D-Tale code, but this is not required
df = df.reset_index().drop('index', axis=1, errors='ignore')
df.columns = [str(c) for c in df.columns]  # update columns to strings in case they are numbers

s= df['tweet']
s = s.str.replace(r'[\d]+', '')
df.loc[:, 'tweet_cleaned'] = pd.Series(s, index=df.index, name='tweet_cleaned')
df = df.rename(columns={'date': 'tarih'})

df.head()

# DISCLAIMER: 'df' refers to the data you passed in when calling 'dtale.show'

import pandas as pd

if isinstance(df, (pd.DatetimeIndex, pd.MultiIndex)):
	df = df.to_frame(index=False)

# remove any pre-existing indices for ease of use in the D-Tale code, but this is not required
df = df.reset_index().drop('index', axis=1, errors='ignore')
df.columns = [str(c) for c in df.columns]  # update columns to strings in case they are numbers

s= df['tweet']
s = s.str.replace(r'[\d]+', '')
df.loc[:, 'tweet_cleaned'] = pd.Series(s, index=df.index, name='tweet_cleaned')
df = df.rename(columns={'date': 'tarih'})
df = df[[c for c in df.columns if c not in ['date']]]
df.head()

# DISCLAIMER: 'df' refers to the data you passed in when calling 'dtale.show'

import pandas as pd

duplicates = df.duplicated(['username'], keep='first')
df = df[~duplicates]
if isinstance(df, (pd.DatetimeIndex, pd.MultiIndex)):
	df = df.to_frame(index=False)

# remove any pre-existing indices for ease of use in the D-Tale code, but this is not required
df = df.reset_index().drop('index', axis=1, errors='ignore')
df.columns = [str(c) for c in df.columns]  # update columns to strings in case they are numbers

s= df['tweet']
s = s.str.replace(r'[\d]+', '')
df.loc[:, 'tweet_cleaned'] = pd.Series(s, index=df.index, name='tweet_cleaned')
df = df.rename(columns={'date': 'tarih'})
df = df[[c for c in df.columns if c not in ['date']]]

df.head()

"""TextHero Library"""

akbank['language'].value_counts()

akbank_en = akbank[akbank['language'] == 'en']
akbank_en.head()

akbank_en.to_excel('akbank_en_datalarim.xlsx')

akbank_en.shape

pip install texthero

remove_digits() Remove all blocks of digits.
    remove_punctuation() Remove all string.punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~).
    remove_diacritics() Remove all accents from strings.
    remove_stopwords() Remove all stop words.

import texthero as hero
import pandas as pd

from texthero import preprocessing

custom_pipeline = [preprocessing.fillna,
                   preprocessing.lowercase,
                   preprocessing.remove_whitespace,
                   preprocessing.remove_stopwords,
                   preprocessing.remove_diacritics,
                   preprocessing.remove_punctuation,
                   preprocessing.remove_digits,
                   preprocessing.remove_html_tags,
                   preprocessing.remove_urls,]
akbank_en['clean_tweet'] = hero.clean(akbank_en['tweet'], custom_pipeline)

akbank_en.to_excel('akbank_en.xlsx')

akbank_en.head()

hero.named_entities(akbank_en['clean_tweet'] )

NUM_TOP_WORDS = 10
hero.top_words(akbank_en['clean_tweet'])[:NUM_TOP_WORDS]

hero.wordcloud(akbank_en['clean_tweet'])

"""TextBlob"""

pip install textblob

from textblob import TextBlob

p_yazilarim = []
p_sonuclarim = []

n_yazilarim = []
n_sonuclarim = []

notr_yazilarim = []


for tweet in akbank_en['clean_tweet']:
  blob = TextBlob(tweet)

  if blob.polarity > 0 :
    p_yazilarim.append(tweet)
    p_sonuclarim.append(blob.sentiment)

  elif blob.polarity < 0 :
    n_yazilarim.append(tweet)
    n_sonuclarim.append(blob.sentiment)

  else:
    notr_yazilarim.append(tweet)

"""Excell olarak kaydetme"""

pozitifler = pd.DataFrame(p_yazilarim,columns=['Pozitif_yazilar'])
pozitifler['Pozitif_sonuclar'] = p_sonuclarim
pozitifler.head()

pozitifler.to_csv('pozitif_sentiment.csv')

pozitifler.shape

negatifler = pd.DataFrame(n_yazilarim,columns=['Negatif_yazilar'])
negatifler['Negatif_sonuclar'] = n_sonuclarim
negatifler.head()

negatifler.to_csv('negatif_sentiment.csv')

negatifler.shape

notrler = pd.DataFrame(notr_yazilarim,columns=['Notr_yazilar'])
notrler.head()

notrler.to_csv('notrler_sentiment.csv')

notrler.shape

310+48+139

"""NLTK SentimentIntensityAnalyzer()"""

import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sid = SentimentIntensityAnalyzer()

akbank_en['polarity_scores'] = akbank_en['clean_tweet'].apply(lambda x : sid.polarity_scores(x)['compound'])

akbank_en['polarity_scores'] = akbank_en['clean_tweet'].apply(lambda x : sid.polarity_scores(x)['compound'])

akbank_en.head()

#Requirements.txt dosyası olusturma
!pip freeze > requirements.txt

#Install dependencies from requirements.txt 
!pip install -r requirements.txt